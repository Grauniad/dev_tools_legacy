# makefile tools library for bulding multi-directory projects
#
# Luke Humphreys 2012
 
target: all

ifndef MODE
   $(warning MODE has not been specified: assuming CPP)
   MODE=CPP
endif 

# Must be specified by the outer makefile-include
ifndef PROJECT_ROOT_DIR
   $(error PROJECT_ROOT_DIR must be specified!)
endif

ifndef DEV_TOOLS_DIR
   $(error DEV_TOOLS_DIR must point to the root of the dev_tools depot)
endif

EXPORTS_DIR=$(PROJECT_ROOT_DIR)/exports/
SCRIPTS_DIR=$(DEV_TOOLS_DIR)/Scripts/

# Define the internal file structure
EXPORT_TESTS_TO=$(EXPORTS_DIR)tests/
EXPORT_INCLUDES_DIR=$(EXPORTS_DIR)includes/
EXPORT_OBJS_DIR=$(EXPORTS_DIR)objs/
EXPORT_LIB_DIR=$(EXPORTS_DIR)lib/
EXPORT_PROFILE_DIR=$(EXPORTS_DIR)profs/
EXPORT_COVER_DIR=$(EXPORTS_DIR)coverage/

EXTERNAL_INCLUDE_DIR=$(DEV_TOOLS_DIR)/EXTERNAL_INCLUDES/
EXTERNAL_LIBS_DIR=$(DEV_TOOLS_DIR)/EXTERNAL_LIBS/

INCLUDES_DIR:=$(EXPORT_INCLUDES_DIR)
LIBS_DIR=$(EXPORT_LIB_DIR)
EXTERNAL_LIBS=

ifndef WEB_VIEWER
    WEB_VIEWER=firefox
endif

# Load common defaults
include $(DEV_TOOLS_DIR)/Make/makefile.COMMON.include


# Load compiler specific flags
ifndef TOOL_CHAIN
   TOOL_CHAIN=$(DEFAULT_TOOL_CHAIN)
endif

# Allow local override of the global tool-chain
ifdef FORCE_TOOL_CHAIN
   TOOL_CHAIN=$(FORCE_TOOL_CHAIN)
endif

include $(DEV_TOOLS_DIR)/Make/Compilers/makefile.$(TOOL_CHAIN).include

include $(DEV_TOOLS_DIR)/Make/Languages/makefile.$(MODE).include

# Validate variables
include $(DEV_TOOLS_DIR)/Make/makefile.MANDATORY.include


ifndef TAGS_DIR
    EXPORT_TAGS_DIR=$(EXPORTS_DIR)tags/
else
    EXPORT_TAGS_DIR=$(TAGS_DIR)
endif


###################################################################
#                    System Defaults                              #
###################################################################

#
#  CONFIGURE COMPILER
#

ifndef USE_FPIC
    USE_FPIC=NO
endif

# Compilation variables
#
ifndef DEBUG_FLAGS
    DEBUG_FLAGS=$(DEFAULT_DEBUG_FLAGS)
endif

ifndef RELEASE_FLAGS
   RELEASE_FLAGS=$(DEFAULT_RELEASE_FLAGS)
endif

ifndef FAST_FLAGS
   FAST_FLAGS=$(DEFAULT_FAST_FLAGS)
endif

# Set to YES to enable
ifndef DEBUG_ON
    DEBUG_ON=YES
endif

# Set to YES to enable
ifndef RELEASE_ON
    RELEASE_ON=NO
endif
ifndef FAST_ON
    RELEASE_ON=NO
endif

# If yes, build will if any warnings are raised
ifndef FATAL_WARNINGS
   FATAL_WARNINGS=YES
endif

ifndef ALL_WARNINGS
   ALL_WARNINGS=YES
endif

#
# External Libraries
#
ifndef USE_LOCAL_GSL
   USE_LOCAL_GSL=YES
endif

ifndef USE_GSL
   USE_GSL=NO
endif

ifndef USE_LOCAL_PLPLOT
   USE_LOCAL_PLPLOT=YES
endif

ifndef USE_PLPLOT
   USE_PLPLOT=NO
endif

ifndef USE_LOCAL_BOOST
   USE_LOCAL_BOOST=YES
endif

ifndef USE_BOOST
   USE_BOOST=NO
endif

ifndef USE_SQLITE
    USE_SQLITE=NO
endif

ifndef USE_THREADS
    USE_THREADS=YES
endif

#
# Configure Debuggers
#

ifndef VALGRIND_OPTIONS
    VALGRIND_OPTIONS=--leak-check=full
    # Report the source of unintialised errors
    VALGRIND_OPTIONS+=--track-origins=yes
    # RAM is cheap
    VALGRIND_OPTIONS+=--freelist-vol=2000000000
    # Should run silently for regression tests, only report errors
    VALGRIND_OPTIONS+=--quiet
    # Fail the build if an error is found
    VALGRIND_OPTIONS+=--error-exitcode=1
    # Report any file handles that haven't been cleaned up
    VALGRIND_OPTIONS+=--track-fds=yes
    # Using a (vim!) wrapper that allows us to easily handle large call stacks
    VALGRIND_OPTIONS+=--num-callers=50
    # For easy debugging
    VALGRIND_OPTIONS+=--fullpath-after=
endif

ifndef HELGRIND_OPTIONS
    # Use the tread-debugging tool
    HELGRIND_OPTIONS=--tool=helgrind
    # Report an error if thread 1 reads XXXX, thread 2 frees it, and no lock prevents a race
    HELGRIND_OPTIONS+=--free-is-write=yes
    # Should run silently for regression tests, only report errors
    # For easy debugging
    HELGRIND__OPTIONS+=--fullpath-after=
endif


ifndef GDB_OPTIONS
   # Use terminal user interface (display source code)
   GDB_OPTIONS=-tui 
   # Source the command file in the root directory 
   #  - define break points here
   #  - defines the code that auto-starts and cleans up the test
   GDB_OPTIONS+=-x $(PROJECT_ROOT_DIR)/.gdb_breakpoints 
   GDB_OPTIONS+=-x $(DEV_TOOLS_DIR)/Scripts/.gdb_setup
   # We want the test return code to test success
   GDB_OPTIONS+=-return-child-result
endif

ifndef CORE_SIZE
   CORE_SIZE=$(DEFAULT_CORE_SIZE)
endif

###################################################################
#                Target SpecificOverides                          #
###################################################################


ifeq ($(findstring debug,$(MAKECMDGOALS)),debug)
   DEBUG_ON=YES
   RELEASE_ON=NO
   FAST_ON=NO
endif

ifeq ($(findstring release,$(MAKECMDGOALS)),release)
   DEBUG_ON=NO
   RELEASE_ON=YES
   FAST_ON=NO
endif

ifeq ($(findstring fast,$(MAKECMDGOALS)),fast)
   DEBUG_ON=NO
   RELEASE_ON=NO
   FAST_ON=YES
endif

ifeq ($(findstring full_log,$(MAKECMDGOALS)),full_log)
   export ELF_64_TEST_FULL_TEST_LOG=TRUE
endif

ifeq ($(findstring boost-help,$(MAKECMDGOALS)),boost-help)
   export BOOST_HELP_MODULE=$(shell echo $(MAKECMDGOALS) | awk '{print $$2}')
endif


###################################################################
#                    System Configuration                         #
###################################################################
ifdef DEBUG_ON
   EXTERNAL_LINK_TYPE=DEBUG
else    
   EXTERNAL_LINK_TYPE=RELEASE
endif

INCLUDE_FLAGS=-I$(EXPORT_INCLUDES_DIR) -I$(CURDIR)
INCLUDE_FLAGS+=$(addprefix -I,$(ADDITIONAL_INCLUDE_FLAGS))

# Expose libDefer to the test framework
# Make the defer header available for use in test scripts
TEST_COMP_FLAGS=-I$(DEV_TOOLS_DIR)/CPP/Libraries/libDefer/
TEST_COMP_FLAGS+=$(ADDITIONAL_TEST_COMP_FLAGS)

ifdef COMP_FLAGS
    COMP_FLAGS+=$(INCLUDE_FLAGS)
else
    COMP_FLAGS=$(INCLUDE_FLAGS)
endif

ifeq ($(findstring YES,$(USE_FPIC)),YES)
   COMP_FLAGS+=-fpic
endif

ifndef COMP_PROFILE_FLAGS
    COMP_PROFILE_FLAGS=$(DEFAULT_COMP_PROFILE_FLAGS)
endif

ifndef PROFILE_SECS
  PROFILE_SECS=$(DEFAULT_PROFILE_SECS)
endif

ifeq ($(findstring profile,$(MAKECMDGOALS)),profile)
   COMP_FLAGS+=-D__PROFILE__TESTS -D__PROFILE_CLOCK_SECS__=$(PROFILE_SECS) $(COMP_PROFILE_FLAGS)
   DEBUG_ON=FALSE
endif

ifeq ($(FATAL_WARNINGS),YES)
  COMP_FLAGS+=$(COMPILER_FATAL_WARNINGS)
endif

ifeq ($(ALL_WARNINGS),YES)
  COMP_FLAGS+=$(COMPILER_ALL_WARNINGS)
endif

ifdef SUPPRESSED_WARNINGS
   COMP_FLAGS+=$(addprefix $(COMPILER_WARNING_SUPPRESSION_PREFIX),$(SUPPRESSED_WARNINGS))
endif

ifeq ($(DEBUG_ON),YES)
  COMP_FLAGS+=$(DEBUG_FLAGS)
endif

ifeq ($(RELEASE_ON),YES)
  COMP_FLAGS+=$(RELEASE_FLAGS)
endif

ifeq ($(FAST_ON),YES)
  COMP_FLAGS+=$(FAST_FLAGS)
endif


ifeq ($(findstring cover,$(MAKECMDGOALS)),cover)
   COMP_FLAGS+=$(COMPILER_COVERAGE)
endif

COMP_FLAGS+=-std=$(STD)

###################################################################
#                  Calculate Targets                              #
###################################################################

# calculate variables used for macros 
# DO NOT CHANGE THESE UNLESS YOU KNOW WHAT YOU ARE DOING
BUILD_DEPS=BUILD_FOLDERS 
POST_BUILD_DEPS=
TO_CLEAN=FOLDERS_TO_CLEAN FILES_TO_CLEAN
TO_BUILD=
FILES_TO_CLEAN=
FOLDERS_TO_CLEAN=
LINKED_FILES=
TO_COPY=
SUB_FOLDER=

ifdef TARGET_DYNAMIC_LIB
   $(shell mkdir -p $(EXPORT_LIB_DIR))
   DYNAMIC_LIB_TO_BUILD=$(addsuffix .so,$(EXPORT_LIB_DIR)$(TARGET_DYNAMIC_LIB))
   BUILD_DEPS+=$(DYNAMIC_LIB_TO_BUILD)
   FILES_TO_CLEAN+=$(DYNAMIC_LIB_TO_BUILD)
   SUB_FOLDER=$(TARGET_DYNAMIC_LIB)
endif

ifdef TARGET_LIB
   $(shell mkdir -p $(EXPORT_LIB_DIR))
   LIB_TO_BUILD=$(addsuffix .a,$(EXPORT_LIB_DIR)$(TARGET_LIB))
   BUILD_DEPS+=$(LIB_TO_BUILD)
   FILES_TO_CLEAN+=$(LIB_TO_BUILD)
   SUB_FOLDER=$(TARGET_LIB)
endif

ifdef EXECUTABLE   
   BUILD_DEPS+=EXEC
   EXEC_TO_BUILD=$(PROJECT_ROOT_DIR)/$(EXECUTABLE)
   FILES_TO_CLEAN+=$(EXEC_TO_BUILD)
   SUB_FOLDER=$(EXECUTABLE)
endif

EXPORT_INCLUDES_DIR:=$(EXPORT_INCLUDES_DIR)$(SUB_FOLDER)/
EXPORT_OBJS_DIR:=$(EXPORT_OBJS_DIR)$(SUB_FOLDER)/
EXPORT_PROFILE_DIR:=$(EXPORT_PROFILE_DIR)$(SUB_FOLDER)/
EXPORT_COVER_DIR:=$(EXPORT_COVER_DIR)$(SUB_FOLDER)/

ifeq ($(findstring cover,$(MAKECMDGOALS)),cover)
   $(shell mkdir -p $(EXPORT_COVER_DIR))
endif

ifdef SOURCES
   $(shell mkdir -p $(EXPORT_OBJS_DIR))
   TO_BUILD+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES:%$(SOURCE_EXTENSION)=%.o))
   FILES_TO_CLEAN+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES:%$(SOURCE_EXTENSION)=%.gcno))
   FILES_TO_CLEAN+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES:%$(SOURCE_EXTENSION)=%.gcda))
   FILES_TO_CLEAN+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES:%$(SOURCE_EXTENSION)=%.o))
   FILES_TO_CLEAN+=$(shell ls *.gcov 2> /dev/null)
    ifeq ($(findstring cover,$(MAKECMDGOALS)),cover)
        FILES_TO_CLEAN+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES))
        TO_COPY+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES))
    endif
endif

ifdef EXPORT_INCLUDES
   $(shell mkdir -p $(EXPORT_INCLUDES_DIR))
   EXPORTED_INCLUDES=$(addprefix $(EXPORT_INCLUDES_DIR),$(EXPORT_INCLUDES))
   POST_BUILD_DEPS+=$(EXPORTED_INCLUDES)
   FILES_TO_CLEAN+=$(EXPORTED_INCLUDES)
   ifeq ($(findstring cover,$(MAKECMDGOALS)),cover)
       FILES_TO_CLEAN+=$(addprefix $(EXPORT_OBJS_DIR),$(EXPORT_INCLUDES))
       TO_COPY+=$(addprefix $(EXPORT_OBJS_DIR),$(EXPORT_INCLUDES))
   endif
endif

ifdef MAKE_DIRS
   FOLDERS_TO_BUILD=$(MAKE_DIRS)
   FOLDERS_TO_CLEAN=$(MAKE_DIRS)
endif


ifdef BUILD_TIME_TESTS
   $(shell mkdir -p $(EXPORT_TESTS_TO))
   testCmd=RUN_AUTO_TEST
   ifeq ($(findstring memtest,$(MAKECMDGOALS)),memtest)
	   testCmd=VALGRIND_AUTO_TESTS
   endif
   ifeq ($(findstring threadtest,$(MAKECMDGOALS)),threadtest)
	   testCmd=HELGRIND_AUTO_TESTS
   endif
   ifeq ($(findstring gdbtest,$(MAKECMDGOALS)),gdbtest)
	   testCmd=GDB_AUTO_TESTS
   endif
   ifeq ($(findstring profile,$(MAKECMDGOALS)),profile)
     $(shell mkdir -p $(EXPORT_PROFILE_DIR))
     testCmd=BUILD_PROFILE_PAGE
   endif
   BUILD_DEPS+=$(testCmd)
   ifneq ($(findstring notests,$(MAKECMDGOALS)),notests)
       TESTS_TO_BUILD=$(addprefix $(EXPORT_TESTS_TO),$(BUILD_TIME_TESTS))
       TESTS_TO_RUN=$(TESTS_TO_BUILD)
       FILES_TO_CLEAN+=$(TESTS_TO_BUILD)
       FILES_TO_CLEAN+=$(shell ls *.gcda 2> /dev/null)
       FILES_TO_CLEAN+=$(shell ls *.gcno 2> /dev/null)
   endif
endif

ifdef TEST_SCRIPTS
   $(shell mkdir -p $(EXPORT_TESTS_TO))
   testCmd=RUN_AUTO_TEST
   ifeq ($(findstring memtest,$(MAKECMDGOALS)),memtest)
	   testCmd=VALGRIND_AUTO_TESTS
   endif
   ifeq ($(findstring threadtest,$(MAKECMDGOALS)),threadtest)
	   testCmd=HELGRIND_AUTO_TESTS
   endif
   ifeq ($(findstring gdbtest,$(MAKECMDGOALS)),gdbtest)
	   testCmd=GDB_AUTO_TESTS
   endif
   ifeq ($(findstring profile,$(MAKECMDGOALS)),profile)
     $(shell mkdir -p $(EXPORT_PROFILE_DIR))
     testCmd=BUILD_PROFILE_PAGE
   endif
   BUILD_DEPS+=$(testCmd)
   ifneq ($(findstring notests,$(MAKECMDGOALS)),notests)
       TESTS_TO_RUN=$(TEST_SCRIPTS)
       FILES_TO_CLEAN+=$(shell ls *.gcda 2> /dev/null)
       FILES_TO_CLEAN+=$(shell ls *.gcno 2> /dev/null)
   endif
endif

ifdef LINKED_LIBS
   LINKED_FILES+=$(addprefix $(EXPORT_LIB_DIR),$(addsuffix .a,$(LINKED_LIBS)))
   INCLUDE_FLAGS+=$(addprefix -I$(INCLUDES_DIR),$(addsuffix /,$(LINKED_LIBS)))
endif

###################################################################
#                  Foreign libraries                              #
###################################################################

#
# GSL Setup
#
ifeq ($(USE_GSL),YES)
ifeq ($(USE_LOCAL_GSL),YES)
    EXTERNAL_LIBS+=$(GSL_LOCAL_LINK_FLAGS)
else
    EXTERNAL_LIBS+=$(GSL_DEV_TOOLS_LINK_FLAGS)
    INCLUDE_FLAGS+=-I$(EXTERNAL_INCLUDE_DIR)/GSL
endif
endif

#
# SQL-LITE Setup
#
ifeq ($(USE_SQLITE),YES)
    EXTERNAL_LIBS+=$(SQLITE_LINK_FLAGS)
endif

#
# Boost Setup
#
BOOST_LIBS=
BOOST_LINK_FLAGS=

ifneq ($(BOOST_MODULES),)
   USE_BOOST=YES
endif

ifeq ($(USE_BOOST),YES)
ifeq ($(USE_LOCAL_BOOST),YES)
   BOOST_LIBS=$(addprefix -lboost_,$(BOOST_MODULES))
   BOOST_LINK_FLAGS=$(BOOST_LIBS)
else
   BOOST_LIBS=$(addsuffix .a,$(addprefix libboost_,$(BOOST_MODULES)))
   BOOST_LINK_FLAGS=$(addprefix $(BOOST_DIR)/$(EXTERNAL_LINK_TYPE)/lib/,$(BOOST_LIBS))
   INCLUDE_FLAGS+=-I$(BOOST_DIR)/$(EXTERNAL_LINK_TYPE)/include
endif
   EXTERNAL_LIBS+=$(BOOST_LINK_FLAGS)
endif

#
# PL-Plot
#
ifeq ($(USE_PLPLOT),YES)
ifeq ($(USE_LOCAL_PLPLOT),YES)
    EXTERNAL_LIBS+=$(PLPLOT_LOCAL_LINK_FLAGS)
else
    EXTERNAL_LIBS+=$(PLPLOT_DEV_TOOLS_LINK_FLAGS)
    INCLUDE_FLAGS+=-I$(EXTERNAL_INCLUDE_DIR)/PLPLOT
endif
endif

ifeq ($(USE_THREADS),YES)
    EXTERNAL_LIBS+=$(THREADS_LINK_FLAGS)
endif



###################################################################
#                        Tags                                     #
###################################################################
ifdef TAGS_FILE
   $(shell mkdir -p $(EXPORT_TAGS_DIR))
   TAGS_TO_BUILD=$(EXPORT_TAGS_DIR)$(TAGS_FILE)
   BUILD_DEPS+=$(TAGS_TO_BUILD)
endif


###################################################################
#                     Overrides                                   #
###################################################################
ifeq ($(strip $(FILES_TO_CLEAN)),)
    CLEAN_CMD=@echo "nothing to clean"
else
    CLEAN_CMD=rm -f $(FILES_TO_CLEAN)
endif

# Allow shutting down a folder based on a TOOL_CHAIN
ifdef NO_$(TOOL_CHAIN)
   BUILD_DEPS=BUILD_FOLDERS
   POST_BUILD_DEPS=
   TO_COPY=
   $(warning Skipping directory $(CURDIR) due to NO_$(TOOL_CHAIN) specification)
endif

ifdef ONLY_MODES
   ifneq ($(findstring $(MODE),$(ONLY_MODES)),$(MODE))
       BUILD_DEPS=BUILD_FOLDERS
       POST_BUILD_DEPS=
       TO_COPY=
       $(warning Skipping directory $(CURDIR) due to mode $(MODE))
   endif
endif

###################################################################
#                  Build Instructions                             #
###################################################################

all: $(BUILD_DEPS) $(TO_COPY) $(POST_BUILD_DEPS)
memtest: all
threadtest: all
gdbtest: all
cover: all 
profile: all
notests: all
debug: all
release: all
fast: all
coverbuild: GEN_COVER
coverview: VIEW_COVER
full_log: all
boost-list: PRINT_BOOST_MODULES
boost-help: OPEN_BOOST_MODULE


OPEN_BOOST_MODULE:
	echo $(MAKECMDGOALS);
	echo $(MAKECMDGOALS) | awk '{print $$2}';
	echo $(BOOST_HELP_MODULE)
	$(WEB_VIEWER) $(DEV_TOOLS_BOOST_MODULES_DIR)/$(BOOST_HELP_MODULE)/index.html

PRINT_BOOST_MODULES:
	for f in $$(find $(DEV_TOOLS_BOOST_MODULES_DIR) -maxdepth 1 -type d | sort); do \
	    basename $$f; \
	done

profileview:
	$(PROFILE_VIEWER)

clean: FOLDERS_TO_CLEAN 
	$(CLEAN_CMD)

EXEC: $(TO_BUILD) $(LINKED_FILES)
	$(COMP) $(COMP_FLAGS) -o $(EXEC_TO_BUILD) $(TO_BUILD) $(LINKED_FILES) $(EXTERNAL_LIBS)

VIEW_COVERAGE:
	@if [ "$(SOURCES)" != "" ]; \
	then for f in $(SOURCES); do \
		gcov -f -o $(EXPORT_OBJS_DIR) $$f | c++filt;\
	done;\
	fi

FOLDERS_TO_CLEAN:
	@for dir in $(FOLDERS_TO_BUILD); do  \
		$(MAKE) -C $$dir clean;         \
		echo "***********************************************************"; \
		echo "Cleaned: $$dir ";\
		echo "************************************************************"; \
	done                                 
 
# Macro for building subfolders
BUILD_FOLDERS :
	@for dir in $(FOLDERS_TO_BUILD); do  \
		$(MAKE) -C $$dir $(MAKECMDGOALS) || exit;        \
		echo "***********************************************************"; \
		echo "Built successfully: $$dir ";\
		echo "************************************************************"; \
	done

RUN_AUTO_TEST: BUILD_AUTO_TESTS .TEST_SETUP
	@ulimit -c $(CORE_SIZE); \
	for test in $(TESTS_TO_RUN); do \
		if [ -e core ]; then \
			rm core;\
		fi;\
		rm -f OverviewLog_*; \
		rm -f FullLog_*; \
		echo "***********************************************************"; \
		echo "Running auto test: $$test";\
		$$test || if [ -e core ]; then gdb -tui $$test core; exit; else exit; fi;\
		echo "************************************************************"; \
	done

VALGRIND_AUTO_TESTS: BUILD_AUTO_TESTS .TEST_SETUP
	@for test in $(TESTS_TO_RUN); do \
		echo "***********************************************************"; \
		echo "Running auto test: $$test";\
		    valgrind $(VALGRIND_OPTIONS) $$test || exit;\
		echo "************************************************************"; \
	done

HELGRIND_AUTO_TESTS: BUILD_AUTO_TESTS .TEST_SETUP
	@for test in $(TESTS_TO_RUN); do \
		echo "***********************************************************"; \
		echo "Running auto test: $$test";\
		    valgrind $(HELGRIND_OPTIONS) $$test || exit;\
		echo "************************************************************"; \
	done

GDB_AUTO_TESTS: BUILD_AUTO_TESTS .TEST_SETUP
	@echo "***********************************************************"; \
	echo "           Running auto tests under gdb                    "; \
        echo " Setup File:  $(PROJECT_ROOT_DIR)/.gdb_setup"; \
	echo "***********************************************************"; \
	for test in $(TESTS_TO_RUN); do \
		passed=1;\
		echo -n "$$(basename $$test)";\
		gdb $(GDB_OPTIONS) $$test || passed=0; \
		if [ $$passed -eq 1 ]; then \
			echo "$$(basename $$test) - PASSED"; \
		else \
			echo "$$(basename $$test) - FAILED"; \
	                echo "***********************************************************"; \
			exit 1;\
		fi \
	done; \
	echo "***********************************************************"; \

PROFILE_TESTS: BUILD_AUTO_TESTS .TEST_SETUP
	@ulimit -c $(CORE_SIZE); \
	for test in $(TESTS_TO_RUN); do\
		echo "***********************************************************"; \
		if [ -e core ]; then \
			rm core;\
		fi;\
		echo "Running auto test: $$test";\
		     $$test || if [ -e core ]; then gdb -tui $$test core; exit; else exit; fi; \
		echo "Profiling: $$test";\
		     $(PROFILE_COMMAND)\
		echo "Generating profile html";\
		     $(PROFILE_GEN_COMMAND)\
		echo "************************************************************"; \
		rm -f gmon.out; \
	done

#
# Macro definition for any setup function the user has chossen not
# to define
#
.%_SETUP:
	echo "No $@ defined - skipping setup..."


BUILD_PROFILE_PAGE: PROFILE_TESTS
	@echo "<html> <body><h1> Test Profiles </h1>" > $(EXPORT_PROFILE_DIR)index.html;\
	echo "<ul>" >> $(EXPORT_PROFILE_DIR)index.html;\
	for f in $$(ls $(EXPORT_PROFILE_DIR)*.html); do\
		echo "<li> <a href=\"$$f\"> $$(basename $$f .profile.html) </a> </li>" >> $(EXPORT_PROFILE_DIR)index.html;\
	done;\
	echo "</ul></body></html>" >> $(EXPORT_PROFILE_DIR)index.html

BUILD_AUTO_TESTS: $(TESTS_TO_BUILD)

VIEW_COVER:
	$(WEB_VIEWER) $(EXPORT_COVER_DIR)$(COVER_FILE)


#
# Macro for building test binaries
#
$(EXPORT_TESTS_TO)%: %$(SOURCE_EXTENSION) $(LINKED_FILES)
	$(COMP) $(COMP_FLAGS) $(TEST_COMP_FLAGS) -o $@ $+ $(LINKED_FILES) $(EXTERNAL_LIBS)

# LIBRARIES
#
# Macro for building STATIC libraries
#
$(LIB_TO_BUILD): $(TO_BUILD)
	$(AR) -cr $@ $(shell ls $(EXPORT_OBJS_DIR)/*)

$(DYNAMIC_LIB_TO_BUILD): $(TO_BUILD) $(LINKED_FILES)
	$(COMP) $(COMP_FLAGS) -shared -o $(DYNAMIC_LIB_TO_BUILD) $(TO_BUILD) $(LINKED_FILES) $(EXTERNAL_LIBS)

# INCLUDES
# 
# Macro for moving include files to the includes directory. 
#
$(EXPORTED_INCLUDES): $(EXPORT_INCLUDES_DIR)%: %
	cp $+ $@
 
# COVERAGE FILES
#
# Macro for copying source code when using coverage testing
#
$(EXPORT_OBJS_DIR)%$(SOURCE_EXTENSION): %$(SOURCE_EXTENSION)
	cp $+ $@
$(EXPORT_OBJS_DIR)%$(HEADER_EXTENSION): %$(HEADER_EXTENSION)
	cp $+ $@
$(EXPORT_OBJS_DIR)%$(SOURCE_HEADER_EXTENSION): %$(SOURCE_HEADER_EXTENSION)
	cp $+ $@

# COMPILE
#
# Macro for building object files
#
$(EXPORT_OBJS_DIR)%.o: %$(SOURCE_EXTENSION)
	$(COMP)  $(COMP_FLAGS) -c -o $@ $+

# TAGS
#
#
ifneq ($(strip $(TAGS_TO_BUILD)),)
#rebuild the tags file if anything has changed
$(TAGS_TO_BUILD): $(EXPORT_INCLUDES) $(SOURCES)
	$(CTAGS) $(CTAGS_FLAGS) -f $(TAGS_TO_BUILD) $(CURDIR)
endif


usage:
	@echo "Set the base directory: export PROJECT_ROOT_DIR=<location of makefile.include>"
	@echo "To change the web browser: export WEB_VIEWER=<viewer>"
	@echo ""
	@echo "        TARGETS"
	@echo "MAKE_DIRS                                   List of directories to enter and build"
	@echo "    <$(MAKE_DIRS)>"
	@echo "TARGET_LIB          (<exports>/lib/%.a)     Static library (%.a) to build"
	@echo "    <$(TARGET_LIB)>"
	@echo "EXPORT_INCLUDES     (<exports>/includes/%)  Copy listed files to the includes directory"
	@echo "    <$(EXPORT_INCLUDES)>"
	@echo "EXECUTABLE          (<project root>/%)      Build the stated executable"
	@echo "    <$(EXECUTABLE)>"
	@echo "BUILD_TIME_TESTS    (<exports>/tests/%)     Build all %.cpp files into % tests, and run them"
	@echo "    <$(BUILD_TIME_TESTS)>"
	@echo "LINKED_LIBS                                 %.a files to link against"
	@echo "    <$(LINKED_LIBS)>"
	@echo "CPP_TAGS_FILE       (<exports/tags/%)       name of ctags file for this directory"
	@echo "    <$(CPP_TAGS_FILE)>"
	@echo ""
	@echo "        Export Locations"
	@echo "EXPORT_COVER_DIR:    $(EXPORT_PROFILE_DIR)"
	@echo "EXPORT_INCLUDES_DIR: $(EXPORT_INCLUDES_DIR)"
	@echo "EXPORT_LIB_DIR:      $(EXPORT_LIB_DIR)"
	@echo "EXPORT_OBJS_DIR:     $(EXPORT_OBJS_DIR)"
	@echo "EXPORT_PROFILE_DIR:  $(EXPORT_PROFILE_DIR)"
	@echo "EXPORT_TAGS_DIR:     $(EXPORT_TAGS_DIR)"
	@echo "EXPORT_TESTS_TO:     $(EXPORT_TESTS_TO)"
	@echo ""
	@echo "        Linker Options"
	@echo "INCLUDES_DIR:  $(INCLUDES_DIR)"
	@echo "USE_GSL:       $(USE_GSL)   ( LOCAL: $(USE_LOCAL_GSL))"
	@echo "USE_PLPLOT:    $(USE_PLPLOT)   ( LOCAL: $(USE_LOCAL_PLPLOT))"
	@echo "USE_SQLITE:    $(USE_SQLITE)"
	@echo "LINKED_FILES:  $(LINKED_FILES)"
	@echo "EXTERNAL_LIBS: $(EXTERNAL_LIBS)"
	@echo "USE_FPIC:      $(USE_FPIC)"
	@echo ""
	@echo "        Boost Options (Enabled: $(USE_BOOST))"
	@echo "Build Options:"
	@echo "  USE_LOCAL_BOOST:      $(USE_LOCAL_BOOST)"
	@echo "  BOOST_MODULES:        $(BOOST_MODULES)"
	@echo "Derived Options:"
	@echo "  Boost Libs:           $(BOOST_LIBS)"
	@echo "  Boost Link Flags:     $(BOOST_LINK_FLAGS)"
	@echo "Setup Options (set in environment):"
	@echo "  DEV_TOOLS_GCC_BOOST_DIR:                   $(DEV_TOOLS_GCC_BOOST_DIR)"
	@echo "  DEV_TOOLS_INTEL_BOOST_DIR:                 $(DEV_TOOLS_INTEL_BOOST_DIR)"
	@echo "  DEV_TOOLS_BOOST_MODULES_DIR (for help):    $(DEV_TOOLS_BOOST_MODULES_DIR)"
	@echo "Boost related commands:"
	@echo "  To see a list of modues:      >>  make boost-list"
	@echo "  TO open a module's help page: >>  make bost-help <module>" 
	@echo ""
	@echo "        Test Options"
	@echo "DEV_TOOLS_TEST_CAPTURE_FROM  (Cherry pick contexts to full_log):"
	@echo "    >$(DEV_TOOLS_TEST_CAPTURE_FROM)<"
	@echo "Other Test Options ( set to activate)"
	@echo "    DEV_TOOLS_TEST_FULL_TEST_LOG:  >$(DEV_TOOLS_TEST_FULL_TEST_LOG)<"
	@echo "    NO_LOG_CHANNEL:                >$(NO_LOG_CHANNEL)<"
	@echo "    NO_LOG_LOCKS:                  >$(NO_LOG_LOCKS)<"
	@echo "    NO_LOG_SCHEDULER:              >$(NO_LOG_SCHEDULER)<"
	@echo "    NO_LOG_VERBOSE:                >$(NO_LOG_VERBOSE)<"
	@echo "    NO_LOG_VERY_VERBOSE:           >$(NO_LOG_VERY_VERBOSE)<"
	@echo ""
	@echo "        Thread Options"
	@echo "    Starting Thread Pool Size:"
	@echo "       TASK_MASTER_NUM_THREADS:      >$(TASK_MASTER_NUM_THREADS)<"
	@echo ""
	@echo "        Compiler Options"
	@echo "MODE:              $(MODE)"
	@echo "TOOL_CHAIN:        $(TOOL_CHAIN)"
	@echo "COMPILER:          $(COMP)"
	@echo "SOURCE_EXTENSION:  $(SOURCE_EXTENSION)"
	@echo "COMPILER FLAGS:    $(COMP_FLAGS)"
	@echo ""
	@echo "ADDITIONAL_INCLUDE_FLAGS:  Add extra include directories - (), <$(ADDITIONAL_INCLUDE_FLAGS)>"
	@echo "ADDITIONAL_TEST_COMP_FLAGS: Add extra flags used when compiling test binaries - (), <$(ADDITIONAL_INCLUDE_FLAGS)>"
	@echo "ALL_WARNINGS               Set to NO to turn off warnings for questionable code - (YES), <$(ALL_WARNINGS)>"
	@echo "CORE_SIZE                  Max allowed size of genereated core files - ($(DEFAULT_CORE_SIZE)), <$(CORE_SIZE)>"
	@echo "CPPSTD:                    Set the C++ standard to be used by $(CPP) - ($(DEFAULT_CPPSTD)), <$(CPPSTD)>"
	@echo "COMP_FLAGS:                 Flags passed to $(CPP) - (), <$(COMP_FLAGS)>" 
	@echo "COMP_PROFILE_FLAGS          Flags used when profiling - ($(DEFAULT_COMP_PROFILE_FLAGS)), <$(COMP_PROFILE_FLAGS)>"
	@echo "DEBUG_FLAGS:               Flags to $(CPP) when debugging is enabled - ($(DEFAULT_DEBUG_FLAGS)), <$(DEBUG_FLAGS)>"
	@echo "DEBUG_ON:                  To disable debug symbols: export DEBUG_ON=FALSE - (YES), <$(DEBUG_ON)>"
	@echo "FAST_FLAGS                 Flags to $(CPP)when fast build is enabled (Enable dangerous optimizations) -  ($(DEFAULT_FAST_FLAGS)), <$(FAST_FLAGS)>"
	@echo "FAST_ON:                   Do everything to enhance performance, including dangerous optimizations - (NO), <$(FAST_ON)>"
	@echo "FATAL_WARNINGS             Set to NO to prevent compiler warnings becomings errors - (YES), <$(FATAL_WARNINGS)>"
	@echo "PROFILE_SECS               Minimum time a test must run for when profiling - ($(DEFAULT_PROFILE_SECS)), <$(PROFILE_SECS)>"
	@echo "RELEASE_FLAGS              Flags to $(CPP)when release build is enabled -  ($(DEFAULT_RELEASE_FLAGS)), <$(RELEASE_FLAGS)>"
	@echo "RELEASE_ON:                Enable release optimizations - (NO), <$(RELEASE_ON)>"
	@echo "SUPPRESSED_WARNINGS:       List of specific warnings to supress - () , <$(SUPPRESSED_WARNINGS)>"
	@echo "USE_CPP11:                 To use the CPP11 std, set USE_CPP11=YES - (NO), <$(USE_CPP11)>"
	@echo ""
	@echo "        CTAGS"
	@echo "CTAGS:                    (ctags)   Set the ctags executable <$(CTAGS)>"
	@echo "CTAGS_FLAGS:              (-R --sort=1 --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ --tag-relative=no)"
	@echo "                          <$(CTAGS_FLAGS)>"
	@echo ""
	@echo "Tests:"
	@echo "tests defiend in the tests dicectory are exectuted automatically, every time the project is built"
	@echo "There are some additional options when handling tests:"
	@echo "   To valgrind tests: : make memtest"
	@echo "       Works on an ordinary debug build, the build will fail if valgrind identifies any errors"
	@echo ""
	@echo "   To helgrind tests: : make threadtest"
	@echo "       Works on an ordinary debug build, the build will fail if valgrind identifies any errors"
	@echo ""
	@echo "   To run gdb over the tests: make gdbtest"
	@echo "       This exectutes all tests in a gdb enviroment that has source .gdb_setup and .gdb_breakpoints"
	@echo "       The idea is two set a breakpoint at the test / function you are interested"
	@echo "       breakpoints.vim has been confiured to make this trivial from inside the Vim editor"
	@echo ""
	@echo "   To coverage test the tests:"
	@echo "       make cover       : standard build, but with coverage enabled (ideally should be a clean build)"
	@echo "       make coverbuild  : Build the htmlpages from the coverage data (depends on lcov)"
	@echo "       make coverview   : Open coverage data in a web browser"
	@echo ""
	@echo "   To profile the tests:"
	@echo "       WARNING: In order to increase the accuracy of the profile, proifle build is configured to repeat tests"
	@echo "                many times"
	@echo "       WARNING: Profiling should be done with a clean build"
	@echo "       WARNING: To be realistic, profiling disables debuging, and enabled basic optimisation: -O2 -march=native"
	@echo "       make profile     : Build the project, and profile the tests"
	@echo "       make profileview : Open the profile data in a web browser"
	@echo ""
	@echo "       export PROFILE_SECS=<seconds=5>: Time to loop over tests for to build up a better profile "
